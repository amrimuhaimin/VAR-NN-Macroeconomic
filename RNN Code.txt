library(quantmod)
library(RSNNS)
library(Metrics)

#MEMBACA DATA#
data_NN <- read.csv("C:/Users/endah/Downloads/icomcos 2024/Data Penelitian 1.csv", sep = ";")

#BI RATE
#PREPROCESSING STANDARDIZED#
mean.Yt = mean(data_NN$BI_Rate)
sd.Yt   = sd(data_NN$BI_Rate)
BI_Rate1 <- scale(data_NN$BI_Rate)
Inflation1 <- scale(data_NN$Inflasi)
Exchange_Rate1 <- scale(data_NN$Nilai_Tukar)
Money_Supply1 <- scale(data_NN$M2)
IDX_Composite1 <- scale(data_NN$IHSG)
BI_Rate_fit <- BI_Rate1[-c(1, 98:112)]                 #mendefinisikan variabel output
Bi_Rate_fore <- data_NN$BI_Rate[c(97:112)]
BI_Rate <- BI_Rate1[-c(97:112)]
Inflation <- Inflation1[-c(97:112)]
Exchange_Rate <- Exchange_Rate1[-c(97:112)]
Money_Supply <- Money_Supply1[-c(97:112)]
IDX_Composite <- IDX_Composite1[-c(97:112)]

inputs=data.frame(cbind(BI_Rate, Inflation, Exchange_Rate, Money_Supply, IDX_Composite))

output=BI_Rate_fit
h=16
n_train <- length(output)
#MODEL ELMAN RNN
#MEMBENTUK MODEL NEURAL NETWORK#
neuron=c(1,2,3,4,5,10,15)            #neuron yang akan digunakan
seed=c(1,1,1,1,1,1,1)                #berdasarkan percobaan beberapa set.seed yang berbeda

fit=list
y_predtrain=matrix(0,length(BI_Rate_fit),length(neuron))
y_pred=matrix(0,h,length(neuron))

for (k in seq_along(neuron))
{
  set.seed(seed[k])
  fit <- jordan(inputs, output, size=neuron[k], learnFuncParams=c(0.1), maxit =1000)
  fit[[k]]=fit
  y_predtrain[,k]=(predict(fit[[k]], inputs))*sd.Yt+mean.Yt  #hasil ramalan data training
  
  #PREDIKSI TESTING
  BI_Rate_test <- BI_Rate1[c(97:112)]
  Inflation_test <- Inflation1[c(97:112)]
  Exchange_Rate_test <- Exchange_Rate1[c(97:112)]
  Money_Supply_test <- Money_Supply1[c(97:112)]
  IDX_Composite_test <- IDX_Composite1[c(97:112)]
  test=as.matrix(cbind(BI_Rate_test, Inflation_test, Exchange_Rate_test, Money_Supply_test, IDX_Composite_test))
  pred <- rbind(as.matrix(output), matrix(0,nrow=h,ncol=1))
  for (i in (n_train+1):(n_train+h)){
    input_pred <- t(matrix(c(test[i-n_train,]),byrow=FALSE))
    pred[i] <- predict(fit, input_pred)
  }
  y_pred[,k] <- (pred[-(1:n_train)])*sd.Yt+mean.Yt
}

#MEMBERI NAMA KOLOM UNTUK MATRIKS HASIL FORECAST#
colnames(y_predtrain)=c("Neuron 1","Neuron 2","Neuron 3","Neuron 4","Neuron 5",
                        "Neuron 10","Neuron 15")
colnames(y_pred)=c("Neuron 1","Neuron 2","Neuron 3","Neuron 4","Neuron 5",
                   "Neuron 10","Neuron 15") 

#MENGHITUNG TINGKAT KESALAHAN PERAMALAN#
akurasi=matrix(0,length(neuron),3)
colnames(akurasi)=c("RMSE","MAE","MAPE")
rownames(akurasi)=c("Neuron 1","Neuron 2","Neuron 3","Neuron 4","Neuron 5",
                    "Neuron 10","Neuron 15")
for (i in 1:length(neuron))
{
  akurasi[i,1]=accuracy(y_pred[,i],Bi_Rate_fore)[1,2]
  akurasi[i,2]=accuracy(y_pred[,i],Bi_Rate_fore)[1,3]
  akurasi[i,3]=accuracy(y_pred[,i],Bi_Rate_fore)[1,5]
}
akurasi
hasil=rbind(y_predtrain, y_pred)
write.csv(hasil, 'C:/Users/endah/Downloads/icomcos 2024/BIrate_JRNN.csv')